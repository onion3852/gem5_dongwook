# Copyright (c) 2006-2007 The Regents of The University of Michigan
# Copyright (c) 2009 Advanced Micro Devices, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import m5
from m5.objects import *
from m5.defines import buildEnv
from m5.util import addToPath
import os, argparse, sys

addToPath("../")

from common import Options
from ruby import Ruby

# Get paths we might need.  It's expected this file is in m5/configs/example.
config_path = os.path.dirname(os.path.abspath(__file__))
config_root = os.path.dirname(config_path)

parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
)
Options.addNoISAOptions(parser)

# middk start
## PyTrafficGen argument
parser.add_argument(
        "--traffic_mode",
        type = str,
        help = "pattern of generated addresses, linear or random."
    )

parser.add_argument(
        "--traffic_mode_cpu",
        type = str,
        help = "pattern of generated addresses, linear or random or trace."
    )

parser.add_argument(
        "--traffic_mode_dma",
        type = str,
        help = "pattern of generated addresses, linear or random or trace."
    )

parser.add_argument(
        "--trace_duration",
        type = int,
        help = "duration of this state before transitioning."
    )

parser.add_argument(
        "--rd_prct",
        type = int,
        default=50,
        help = "pattern of generated addresses, linear or random."
    )
# middk end


parser.add_argument(
    "--maxloads", metavar="N", default=0, help="Stop after N loads"
)
parser.add_argument(
    "--progress",
    type=int,
    default=1000,
    metavar="NLOADS",
    help="Progress message interval ",
)
parser.add_argument("--num-dmas", type=int, default=0, help="# of dma testers")
parser.add_argument(
    "--functional",
    type=int,
    default=0,
    help="percentage of accesses that should be functional",
)
parser.add_argument(
    "--suppress-func-errors",
    action="store_true",
    help="suppress panic when functional accesses fail",
)

#
# Add the ruby specific and protocol specific options
#
Ruby.define_options(parser)

args = parser.parse_args()

# middk start
## argument print for debug
print("middk_debug] args.num_cpus :", args.num_cpus)
print("middk_debug] args.num_dmas :", args.num_dmas)
print("middk_debug] args.num_dirs :", args.num_dirs)
# middk end

#
# Set the default cache size and associativity to be very small to encourage
# races between requests and writebacks.
#

# middk start
## cache configure

#args.l1d_size = "256B"
#args.l1i_size = "256B"
args.l1d_size = "32kB"
args.l1i_size = "32kB"
args.l1d_assoc = 4
args.l1i_assoc = 4
#args.l2_size = "512B"
args.l2_size = "128kB"
args.l2_assoc = 4
#args.l3_size = "1kB"
args.l3_size = "2MB"
args.l3_assoc = 2
# middk end

block_size = 64

if args.num_cpus > block_size:
    print(
        "Error: Number of testers %d limited to %d because of false sharing"
        % (args.num_cpus, block_size)
    )
    sys.exit(1)





#
# Currently ruby does not support atomic or uncacheable accesses
#
cpus = [
    # middk start
    #MemTest(
    #    max_loads=args.maxloads,
    #    percent_functional=args.functional,
    #    percent_uncacheable=0,
    #    progress_interval=args.progress,
    #    suppress_func_errors=args.suppress_func_errors,
    #)
    PyTrafficGen()
    for i in range(args.num_cpus)
    # middk end
]


system = System(
    cpu=cpus,
    clk_domain=SrcClockDomain(clock=args.sys_clock),
    # middk start
    #mem_ranges=[AddrRange(args.mem_size)],
    #mem_ranges=[AddrRange(start=0x80000000, size=2147483648), AddrRange(start=0x880000000, size=32212254720), AddrRange(start=0x8800000000, size=515396075520)],
    mem_ranges=[AddrRange(start=0x80000000, size="2GB"), AddrRange(start=0x880000000, size="30GB"), AddrRange(start=0x8800000000, size="480GB")],
    # middk end
)

# middk start
# do not worry about reserving space for the backing store
system.mmap_using_noreserve = True
# middk end

if args.num_dmas > 0:
    dmas = [
        # middk start
        #MemTest(
        #    max_loads=args.maxloads,
        #    percent_functional=0,
        #    percent_uncacheable=0,
        #    progress_interval=args.progress,
        #    suppress_func_errors=not args.suppress_func_errors,
        #)
        PyTrafficGen()
        for i in range(args.num_dmas)
        # middk end
    ]

    system.dma_devices = dmas

    # middk start
    comm_monitor_dmas = [
        CommMonitor()
        for i in range(args.num_dmas)
    ]
    system.comm_monitor_dma_devices = comm_monitor_dmas
    # middk end
else:
    dmas = []
    # middk start
    comm_monitor_dmas = []
    # middk end


dma_ports = []
for (i, dma) in enumerate(dmas):
    # middk start
    #dma_ports.append(dma.test)
    #dma_ports.append(dma.port)
    dma.port = comm_monitor_dmas[i].cpu_side_port
    dma_ports.append(comm_monitor_dmas[i].mem_side_port)
    # middk end

# middk start
if args.num_dirs > 0:
    comm_monitor_mems = [
        CommMonitor()
        for i in range(args.num_dirs)
    ]

    system.comm_monitor_mem_devices = comm_monitor_mems
else:
    comm_monitor_mems = []
# middk end


# middk start
## convert Ruby.create_system -> Ruby.create_system_falcon
#Ruby.create_system(args, False, system, dma_ports=dma_ports)
Ruby.create_system_falcon(args, False, system, dma_ports=dma_ports)
# middk end


# Create a top-level voltage domain and clock domain
system.voltage_domain = VoltageDomain(voltage=args.sys_voltage)
system.clk_domain = SrcClockDomain(
    clock=args.sys_clock, voltage_domain=system.voltage_domain
)
# Create a seperate clock domain for Ruby
system.ruby.clk_domain = SrcClockDomain(
    clock=args.ruby_clock, voltage_domain=system.voltage_domain
)

# middk start
# Create a seperate clock domain for memory controller
for i in range(args.num_dirs):
    if len(system.mem_ranges) > 1:
        for j in range(len(system.mem_ranges)):
            #print("middk_debug] i+j", len(system.mem_ranges)*i+j)
            system.mem_ctrls[len(system.mem_ranges)*i+j].clk_domain = SrcClockDomain(
                clock='600MHz', voltage_domain=system.voltage_domain
            )
    else:
        system.mem_ctrls[i].clk_domain = SrcClockDomain(
            clock='600MHz', voltage_domain=system.voltage_domain
        )
    #system.ruby.snf[i].cntrl.clk_domain = SrcClockDomain(
    #    clock='600MHz', voltage_domain=system.voltage_domain
    #)

# Create a seperate clock domain for hnf controller
#for i in range(args.num_l3caches):
#    system.ruby.hnf[i].cntrl.clk_domain = SrcClockDomain(
#        clock='600MHz', voltage_domain=system.voltage_domain
#    )

# Create a seperate clock domain for dma devices
for i in range(args.num_dmas):
    system.dma_devices[i].clk_domain = SrcClockDomain(
        clock='1GHz', voltage_domain=system.voltage_domain
    )
    #system.ruby.dma_rni[i].cntrl.clk_domain = SrcClockDomain(
    system.ruby.dma_rni[i].clk_domain = SrcClockDomain(
        clock='1GHz', voltage_domain=system.voltage_domain
    )

# Create a seperate clock domain for dma's network
for i in range(args.num_dmas):
    system.ruby.network.ext_links[11+i].clk_domain = SrcClockDomain(
        clock='1GHz', voltage_domain=system.voltage_domain
    )
    system.ruby.network.routers[6+i].clk_domain = SrcClockDomain(
        clock='1GHz', voltage_domain=system.voltage_domain
    )
    for j in range(3):
        system.ruby.network.int_links[10+3*i+j].clk_domain = SrcClockDomain(
            clock='1GHz', voltage_domain=system.voltage_domain
        )
    for j in range(2):
        system.ruby.network.int_links[26+4*j+i].clk_domain = SrcClockDomain(
            clock='1GHz', voltage_domain=system.voltage_domain
        )


# middk end

# The tester is most effective when randomization is turned on and
# artifical delay is randomly inserted on messages
#
system.ruby.randomization = True

assert len(cpus) == len(system.ruby._cpu_ports)

for (i, cpu) in enumerate(cpus):
    #
    # Tie the cpu memtester ports to the correct system ports
    #
    cpu.port = system.ruby._cpu_ports[i].in_ports

    # Since the memtester is incredibly bursty, increase the deadlock
    # threshold to 5 million cycles
    #
    system.ruby._cpu_ports[i].deadlock_threshold = 5000000

# middk start
## PyTrafficGen create functions
def createRandomTraffic(tgen):
    yield tgen.createRandom(1000000,                                    # duration
                            80000000,                                              # start_addr
                            AddrRange('2GB').end,                           # end_addr
                            64,                                             # block_size
                            1000,                                           # min_period
                            1000,                                           # max_period
                            args.rd_prct,                                   # read_percent
                            0)                                              # data_limit
    yield tgen.createExit(0)

def createLinearTraffic(tgen):
    yield tgen.createLinear(1000000000000,                                    # duration
                            80000000,                                              # start_addr
                            AddrRange('2GB').end,                           # end_addr
                            64,                                             # block_size
                            1000000000,                                           # min_period
                            1000000000,                                           # max_period
                            args.rd_prct,                                   # read_percent
                            0)                                              # data_limit
    yield tgen.createExit(0)

def createTraceTraffic(tgen):
    yield tgen.createTrace(args.trace_duration,                                          # duration
                           "/home/gem5/util/falcon_trace/test-trace.trc",       # trace_file
                           0)                                                   # addr_offset
    yield tgen.createExit(0)

def createTraceTraffic_dma0(tgen):
    yield tgen.createTrace(args.trace_duration,                                          # duration
                           "/home/gem5/util/falcon_trace/test-trace_dma0.trc",       # trace_file
                           0)                                                   # addr_offset
    yield tgen.createExit(0)

def createTraceTraffic_dma1(tgen):
    yield tgen.createTrace(args.trace_duration,                                          # duration
                           "/home/gem5/util/falcon_trace/test-trace_dma1.trc",       # trace_file
                           0)                                                   # addr_offset
    yield tgen.createExit(0)

def createTraceTraffic_dma2(tgen):
    yield tgen.createTrace(args.trace_duration,                                          # duration
                           "/home/gem5/util/falcon_trace/test-trace_dma2.trc",       # trace_file
                           0)                                                   # addr_offset
    yield tgen.createExit(0)

def createTraceTraffic_dma3(tgen):
    yield tgen.createTrace(args.trace_duration,                                          # duration
                           "/home/gem5/util/falcon_trace/test-trace_dma3.trc",       # trace_file
                           0)                                                   # addr_offset
    yield tgen.createExit(0)

# middk end

# -----------------------
# run simulation
# -----------------------


root = Root(full_system=False, system=system)
root.system.mem_mode = "timing"

# Not much point in this being higher than the L1 latency
m5.ticks.setGlobalFrequency("1ps")
#m5.ticks.setGlobalFrequency("1ns")

# instantiate configuration
m5.instantiate()

# middk start
if args.traffic_mode_cpu == 'linear':
    for i in range(args.num_cpus):
        root.system.cpu[i].start(createLinearTraffic(root.system.cpu[i]))
elif args.traffic_mode_cpu == 'random':
    for i in range(args.num_cpus):
        root.system.cpu[i].start(createRandomTraffic(root.system.cpu[i]))
elif args.traffic_mode_cpu == 'trace' :
    for i in range(args.num_cpus):
        root.system.cpu[i].start(createTraceTraffic(root.system.cpu[i]))
else:
    print('Wrong CPU traffic type! Exiting!')
    exit()

if args.traffic_mode_dma == 'linear':
    for i in range(args.num_dmas):
        root.system.dma_devices[i].start(createLinearTraffic(root.system.dma_devices[i]))
elif args.traffic_mode_dma == 'random':
    for i in range(args.num_dmas):
        root.system.dma_devices[i].start(createRandomTraffic(root.system.dma_devices[i]))
elif args.traffic_mode_dma == 'trace' :
    root.system.dma_devices[0].start(createTraceTraffic_dma0(root.system.dma_devices[0]))
    root.system.dma_devices[1].start(createTraceTraffic_dma1(root.system.dma_devices[1]))
    root.system.dma_devices[2].start(createTraceTraffic_dma2(root.system.dma_devices[2]))
    root.system.dma_devices[3].start(createTraceTraffic_dma3(root.system.dma_devices[3]))
    #for i in range(args.num_dmas):
    #    root.system.dma_devices[i].start(createTraceTraffic(root.system.dma_devices[i]))
else:
    print('Wrong DMA traffic type! Exiting!')
    exit()

# middk end

# simulate until program terminates
exit_event = m5.simulate(args.abs_max_tick)


print("Exiting @ tick", m5.curTick(), "because", exit_event.getCause())
