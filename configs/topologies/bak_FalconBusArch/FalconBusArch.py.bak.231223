# Copyright (c) 2010 Advanced Micro Devices, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from m5.params import *
from m5.objects import *

from topologies.BaseTopology import SimpleTopology


class FalconBusArch(SimpleTopology):
    description = "FalconBusArch"

    def makeTopology(self, options, network, IntLink, ExtLink, Router):

        # default values for link latency and router latency.
        # Can be over-ridden on a per link/router basis
        link_latency = options.link_latency  # used by simple and garnet
        router_latency = options.router_latency  # only used by garnet

        # middk

        controller_to_string = []

        for (i, n) in enumerate(self.nodes):
            #print("middk_debug] ", n)
            controller_to_string.append(str(n))
            if "cpu0.l1i" in controller_to_string[i]:
                cpu0_l1i = n
            elif "cpu0.l1d" in controller_to_string[i]:
                cpu0_l1d = n
            elif "cpu0.l2" in controller_to_string[i]:
                cpu0_l2 = n
            elif "cpu1.l1i" in controller_to_string[i]:
                cpu1_l1i = n
            elif "cpu1.l1d" in controller_to_string[i]:
                cpu1_l1d = n
            elif "cpu1.l2" in controller_to_string[i]:
                cpu1_l2 = n
            elif "hnf" in controller_to_string[i]:
                hnf = n
            elif "dma_rni0" in controller_to_string[i]:
                dma0 = n
            elif "dma_rni1" in controller_to_string[i]:
                dma1 = n
            elif "dma_rni2" in controller_to_string[i]:
                dma2 = n
            elif "dma_rni3" in controller_to_string[i]:
                dma3 = n
            elif "snf0" in controller_to_string[i]:
                snf0 = n
            elif "snf1" in controller_to_string[i]:
                snf1 = n


        #routers = [Router(router_id=i) for i in range(10)] # number of routers

        router_count = 0
        routers = []
        for i in range(3):
            routers.append(
                Router(
                    router_id=router_count,
                    width=128,
                )
            )
            router_count += 1

        for i in range(7):
            routers.append(
                Router(
                    router_id=router_count,
                    width=512,
                )
            )
            router_count += 1

        main_bus = routers[9]  # the main bus is the last router created
        network.routers = routers


        #for (i, n) in enumerate(routers):
        #    print("middk_debug] ", n)


        # cpu
        cpu0 = [cpu0_l1i, cpu0_l1d, cpu0_l2]
        cpu1 = [cpu1_l1i, cpu1_l1d, cpu1_l2]
        l3 = [hnf]
        dmas = [dma0, dma1, dma2, dma3]
        mems = [snf0, snf1]

        link_count = 0

        ## External Link
        ext_links = []

        for (i, n) in enumerate(cpu0):
            ext_links.append(
                ExtLink(
                    link_id=link_count, # 0~2
                    ext_node=n,
                    int_node=routers[0],
                    latency=link_latency,
                    width=128,
                    )
            )
            link_count += 1


        for (i, n) in enumerate(cpu1):
            ext_links.append(
                ExtLink(
                    link_id=link_count, # 3~5
                    ext_node=n,
                    int_node=routers[1],
                    latency=link_latency,
                    width=128,
                    ext_cdc=False,
                    int_cdc=False,
                    ext_serdes=False,
                    int_serdes=False,
                    )
            )
            link_count += 1

        for (i, n) in enumerate(l3):
            ext_links.append(
                ExtLink(
                    link_id=link_count, # 6
                    ext_node=n,
                    int_node=routers[2],
                    latency=link_latency,
                    width=128,
                    ext_cdc=False,
                    int_cdc=False,
                    ext_serdes=False,
                    int_serdes=False,
                    )
            )
            link_count += 1

        for (i, n) in enumerate(dmas):
            ext_links.append(
                ExtLink(
                    link_id=link_count, # 7~10
                    ext_node=n,
                    int_node=routers[3+i],
                    latency=link_latency,
                    width=512,
                    ext_cdc=False,
                    int_cdc=False,
                    ext_serdes=False,
                    int_serdes=False,
                    )
            )
            link_count += 1

        for (i, n) in enumerate(mems):
            ext_links.append(
                ExtLink(
                    link_id=link_count, # 11~12
                    ext_node=n,
                    int_node=routers[3+len(dmas)+i],
                    latency=link_latency,
                    width=512,
                    ext_cdc=True,
                    int_cdc=True,
                    ext_serdes=False,
                    int_serdes=False,
                    )
            )
            link_count += 1

        network.ext_links = ext_links

        ## Internal Link
        int_links = []

        int_links.append(
            IntLink(
                link_id=link_count, # 0
                src_node=routers[0],
                dst_node=routers[2],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=128,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 1
                src_node=routers[1],
                dst_node=routers[2],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=128,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 2
                src_node=routers[2],
                dst_node=main_bus,
                latency=link_latency,
                src_cdc=True,
                dst_cdc=False,
                src_serdes=True,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 3
                src_node=routers[2],
                dst_node=routers[7],
                latency=link_latency,
                src_cdc=True,
                dst_cdc=False,
                src_serdes=True,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 4
                src_node=routers[2],
                dst_node=routers[8],
                latency=link_latency,
                src_cdc=True,
                dst_cdc=False,
                src_serdes=True,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 5
                src_node=routers[3],
                dst_node=main_bus,
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 6
                src_node=routers[3],
                dst_node=routers[7],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 7
                src_node=routers[3],
                dst_node=routers[8],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 8
                src_node=routers[4],
                dst_node=main_bus,
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 9
                src_node=routers[4],
                dst_node=routers[7],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 10
                src_node=routers[4],
                dst_node=routers[8],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 11
                src_node=routers[5],
                dst_node=main_bus,
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 12
                src_node=routers[5],
                dst_node=routers[7],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 13
                src_node=routers[5],
                dst_node=routers[8],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 14
                src_node=routers[6],
                dst_node=main_bus,
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 15
                src_node=routers[6],
                dst_node=routers[7],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 16
                src_node=routers[6],
                dst_node=routers[8],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        ## Internal Link Reverse

        int_links.append(
            IntLink(
                link_id=link_count, # 17
                src_node=routers[2],
                dst_node=routers[0],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=128,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 18
                src_node=routers[2],
                dst_node=routers[1],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=128,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 19
                src_node=main_bus,
                dst_node=routers[2],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=True,
                src_serdes=False,
                dst_serdes=True,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 20
                src_node=routers[7],
                dst_node=routers[2],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=True,
                src_serdes=False,
                dst_serdes=True,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 21
                src_node=routers[8],
                dst_node=routers[2],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=True,
                src_serdes=False,
                dst_serdes=True,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 22
                src_node=main_bus,
                dst_node=routers[3],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 23
                src_node=routers[7],
                dst_node=routers[3],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 24
                src_node=routers[8],
                dst_node=routers[3],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 25
                src_node=main_bus,
                dst_node=routers[4],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 26
                src_node=routers[7],
                dst_node=routers[4],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 27
                src_node=routers[8],
                dst_node=routers[4],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 28
                src_node=main_bus,
                dst_node=routers[5],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 29
                src_node=routers[7],
                dst_node=routers[5],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 30
                src_node=routers[8],
                dst_node=routers[5],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 31
                src_node=main_bus,
                dst_node=routers[6],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 32
                src_node=routers[7],
                dst_node=routers[6],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )
        link_count += 1

        int_links.append(
            IntLink(
                link_id=link_count, # 33
                src_node=routers[8],
                dst_node=routers[6],
                latency=link_latency,
                src_cdc=False,
                dst_cdc=False,
                src_serdes=False,
                dst_serdes=False,
                width=512,
            )
        )

        network.int_links = int_links
